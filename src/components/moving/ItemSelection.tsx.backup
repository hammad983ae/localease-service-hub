import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useLanguage } from '@/contexts/LanguageContext';
import { Package, Home, Sparkles } from 'lucide-react';
import { IsometricMap, Room } from './IsometricMap';
import FloorContainer from './FloorContainer';

interface RoomData {
  floor: string;
  room: string;
  count: number;
}

interface ItemSelectionProps {
  data: Record<string, number>;
  rooms: RoomData[];
  onUpdate: (items: Record<string, number>) => void;
}

interface RoomItem {
  id: string;
  label: string;
  icon: string;
  color: string;
}

interface FloorInfo {
  id: string;
  label: string;
  icon: string;
}

const ItemSelection: React.FC<ItemSelectionProps> = ({ data, rooms, onUpdate }) => {
  const { t } = useLanguage();
  const [selectedMapRooms, setSelectedMapRooms] = useState<Room[]>([]);

  const roomItems: Record<string, RoomItem[]> = {
    livingRoom: [
      { id: 'sofa', label: t('item.sofa'), icon: '🛋️', color: 'from-blue-400 to-purple-500' },
      { id: 'coffeeTable', label: 'Coffee Table', icon: '🪑', color: 'from-amber-400 to-orange-500' },
      { id: 'tv', label: t('item.tv'), icon: '📺', color: 'from-gray-400 to-slate-500' },
      { id: 'armchair', label: 'Armchair', icon: '🪑', color: 'from-emerald-400 to-teal-500' },
      { id: 'bookshelf', label: 'Bookshelf', icon: '📚', color: 'from-orange-400 to-red-500' },
    ],
    bedroom: [
      { id: 'bed', label: t('item.bed'), icon: '🛏️', color: 'from-blue-400 to-indigo-500' },
      { id: 'wardrobe', label: t('item.wardrobe'), icon: '👗', color: 'from-purple-400 to-pink-500' },
      { id: 'dresser', label: 'Dresser', icon: '🗄️', color: 'from-amber-400 to-yellow-500' },
      { id: 'nightstand', label: 'Nightstand', icon: '🪑', color: 'from-green-400 to-emerald-500' },
      { id: 'mirror', label: 'Mirror', icon: '🪞', color: 'from-cyan-400 to-blue-500' },
    ],
    kitchen: [
      { id: 'fridge', label: t('item.fridge'), icon: '❄️', color: 'from-cyan-400 to-blue-500' },
      { id: 'washer', label: t('item.washer'), icon: '🧺', color: 'from-blue-400 to-indigo-500' },
      { id: 'microwave', label: 'Microwave', icon: '📱', color: 'from-gray-400 to-slate-500' },
      { id: 'dishwasher', label: 'Dishwasher', icon: '🍽️', color: 'from-teal-400 to-cyan-500' },
      { id: 'diningTable', label: 'Dining Table', icon: '🍽️', color: 'from-amber-400 to-orange-500' },
    ],
    bathroom: [
      { id: 'washingMachine', label: 'Washing Machine', icon: '🧺', color: 'from-blue-400 to-indigo-500' },
      { id: 'cabinet', label: 'Cabinet', icon: '🗄️', color: 'from-amber-400 to-yellow-500' },
      { id: 'mirror', label: 'Bathroom Mirror', icon: '🪞', color: 'from-cyan-400 to-blue-500' },
    ],
    office: [
      { id: 'desk', label: 'Desk', icon: '🖥️', color: 'from-gray-400 to-slate-500' },
      { id: 'chair', label: 'Office Chair', icon: '🪑', color: 'from-blue-400 to-indigo-500' },
      { id: 'bookshelf', label: 'Bookshelf', icon: '📚', color: 'from-orange-400 to-red-500' },
      { id: 'fileCabinet', label: 'File Cabinet', icon: '🗄️', color: 'from-amber-400 to-yellow-500' },
    ],
    garage: [
      { id: 'toolbox', label: 'Toolbox', icon: '🧰', color: 'from-red-400 to-orange-500' },
      { id: 'workbench', label: 'Workbench', icon: '🔨', color: 'from-amber-400 to-yellow-500' },
      { id: 'shelving', label: 'Shelving Unit', icon: '📦', color: 'from-gray-400 to-slate-500' },
      { id: 'bike', label: 'Bicycle', icon: '🚲', color: 'from-green-400 to-emerald-500' },
    ],
  };

  const floors: FloorInfo[] = [
    { id: 'basement', label: t('floor.basement'), icon: '🏠' },
    { id: 'ground', label: t('floor.ground'), icon: '🏡' },
    { id: 'first', label: t('floor.first'), icon: '🏢' },
    { id: 'second', label: t('floor.second'), icon: '🏗️' },
  ];

  const selectedRoomsData = rooms.reduce((acc, room) => {
    const key = `${room.floor}-${room.room}`;
    if (!acc[key]) {
      acc[key] = {
        floor: room.floor,
        room: room.room,
        count: room.count
      };
    }
    return acc;
  }, {} as Record<string, RoomData>);

  const updateItemCount = (itemId: string, count: number) => {
    const newData = { ...data };
    if (count > 0) {
      newData[itemId] = count;
    } else {
      delete newData[itemId];
    }
    onUpdate(newData);
  };

  const totalItems = Object.values(data).reduce((sum: number, count: number) => sum + count, 0);

  const roomsByFloor = Object.values(selectedRoomsData).reduce((acc, room) => {
    if (!acc[room.floor]) {
      acc[room.floor] = [];
    }
    acc[room.floor].push(room);
    return acc;
  }, {} as Record<string, RoomData[]>);

  const handleMapRoomSelect = (room: Room) => {
    setSelectedMapRooms(prev => {
      const isSelected = prev.some(r => r.id === room.id);
      if (isSelected) {
        return prev.filter(r => r.id !== room.id);
      } else {
        return [...prev, { ...room, selected: true }];
      }
    });
  };

  const handleMapRoomAdd = (room: Room) => {
    // Don't automatically select newly added rooms in item placement mode
  };

  if (Object.keys(selectedRoomsData).length === 0) {
    return (
      <div className="max-w-5xl mx-auto text-center space-y-6">
        <div className="bg-white rounded-3xl p-8 shadow-lg">
          <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-r from-primary to-blue-600 flex items-center justify-center">
            <Sparkles className="h-8 w-8 text-white" />
          </div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent mb-2">
            Select Your Items
          </h2>
          <p className="text-muted-foreground">Please select rooms in the previous step to see available items</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto space-y-8">
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center gap-3 mb-4">
          <div className="w-12 h-12 rounded-full bg-gradient-to-r from-primary to-blue-600 flex items-center justify-center">
            <Package className="h-6 w-6 text-white" />
          </div>
          <h2 className="text-3xl font-bold bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent">
            Select Your Items
          </h2>
        </div>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Choose the items you need to move from each room. Our compact interface makes it easy to manage your inventory.
        </p>
        {totalItems > 0 && (
          <Badge className="bg-gradient-to-r from-green-500 to-green-600 text-white text-lg px-6 py-2">
            <Package className="h-4 w-4 mr-2" />
            {totalItems} item{totalItems !== 1 ? 's' : ''} selected
          </Badge>
        )}
      </div>

      <Card className="bg-white border-0 rounded-3xl overflow-hidden shadow-lg">
        <CardHeader className="bg-gradient-to-r from-primary to-blue-600 text-white relative overflow-hidden">
          <div className="absolute inset-0 opacity-10">
            <div className="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cg fill="%23ffffff" fill-opacity="0.1"%3E%3Ccircle cx="30" cy="30" r="1"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')]" />
          </div>
          <CardTitle className="flex items-center space-x-3 relative z-10">
            <Home className="h-6 w-6" />
            <span>Visualize Your Items</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6 bg-gradient-to-r from-blue-50 to-indigo-50">
          <p className="text-sm text-muted-foreground mb-4">
            View your selected rooms and visualize where your items will be placed
          </p>
          <IsometricMap 
            mode="item-placement"
            onRoomSelect={handleMapRoomSelect}
            selectedRooms={selectedMapRooms}
            onRoomAdd={handleMapRoomAdd}
          />
        </CardContent>
      </Card>

      <div className="space-y-6">
        {Object.entries(roomsByFloor).map(([floorId, floorRooms]) => {
          const floor = floors.find(f => f.id === floorId);
          if (!floor) return null;

          return (
            <FloorContainer
              key={floorId}
              floor={floor}
              rooms={floorRooms}
              roomItems={roomItems}
              itemCounts={data}
              onItemUpdate={updateItemCount}
            />
          );
        })}
      </div>
    </div>
  );
};

export default ItemSelection;
